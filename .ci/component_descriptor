#!/usr/bin/env python3

import dataclasses
import os

import yaml

import ci.util
import ocm


component_descriptor_base_path = os.path.abspath(os.environ['BASE_DEFINITION_PATH'])
component_descriptor_path = os.path.abspath(os.environ['COMPONENT_DESCRIPTOR_PATH'])

own_dir = os.path.abspath(os.path.dirname(__file__))
repo_dir = os.path.abspath(os.path.join(own_dir, os.pardir))
CC_UTILS_VERSIONFILE = os.path.join(repo_dir, 'CC_UTILS_VERSION')
FRESHCLAM_VERSIONFILE = os.path.join(repo_dir, 'FRESHCLAM_VERSION')
BDBA_VERSIONFILE = os.path.join(repo_dir, 'BDBA_DEPENDENCY_VERSION')


def parse_component_descriptor():
    component_descriptor = ocm.ComponentDescriptor.from_dict(
        component_descriptor_dict=ci.util.parse_yaml_file(component_descriptor_base_path),
    )
    return component_descriptor


def version_from_file(
    version_file_path: str,
) -> str:
    with open(version_file_path) as version_file:
        version = version_file.read().strip()
    return version


def main():
    component_descriptor = parse_component_descriptor()
    component = component_descriptor.component

    cc_utils_cref = ocm.ComponentReference(
        name='cc-utils',
        componentName='github.com/gardener/cc-utils',
        version=version_from_file(CC_UTILS_VERSIONFILE),
        labels=[],
    )

    freshclam_cref = ocm.ComponentReference(
        name='freshclam',
        componentName='ocm.software/ocm-gear/freshclam',
        version=version_from_file(FRESHCLAM_VERSIONFILE),
        labels=[],
    )

    bdba_cref = ocm.ComponentReference(
        name='bdba',
        componentName='ocm.software/ocm-gear/bdba-client',
        version=version_from_file(BDBA_VERSIONFILE),
        labels=[],
    )

    for cref in (
        bdba_cref,
        cc_utils_cref,
        freshclam_cref,
    ):
        component.componentReferences.append(cref)

    with open(component_descriptor_path, 'w') as f:
        yaml.dump(
            data=dataclasses.asdict(component_descriptor),
            Dumper=ocm.EnumValueYamlDumper,
            stream=f,
        )


if __name__ == '__main__':
    main()
