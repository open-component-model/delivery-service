#!/usr/bin/env python3

import os

import yaml


repo_dir = os.path.abspath(os.environ['REPO_DIR'])
REQUIREMENTS_EXTENSIONS_FILE = os.path.join(repo_dir, 'requirements.extensions.txt')
REQUIREMENTS_UTILS_FILE = os.path.join(repo_dir, 'requirements.utils.txt')
EXTENSIONS_CHART_DIR = os.path.join(repo_dir, 'charts', 'extensions')

dependency_name = os.environ['DEPENDENCY_NAME']
dependency_version = os.environ['DEPENDENCY_VERSION']


def add_package_version(
    package_name: str,
    package_version: str,
    packages: list[str],
):
    return [
        f'{package_name}=={package_version}\n' if package.startswith(package_name) else package
        for package in packages
    ]


def write_package_version_to_requirements_file(package_name: str, file_path: str):
    with open(file_path, 'r') as requirements_file:
        lines = requirements_file.readlines()

        lines = add_package_version(
            package_name=package_name,
            package_version=dependency_version,
            packages=lines,
        )

    with open(file_path, 'w') as requirements_file:
        requirements_file.writelines(lines)


def main():
    if dependency_name == 'github.com/gardener/cc-utils':
        package_name = 'gardener-cicd-libs'

        write_package_version_to_requirements_file(package_name, REQUIREMENTS_UTILS_FILE)

    elif dependency_name == 'ocm.software/ocm-gear/bdba-client':
        python_distribution_package_name = 'bdba'

        write_package_version_to_requirements_file(
            package_name=python_distribution_package_name,
            file_path=REQUIREMENTS_EXTENSIONS_FILE,
        )

    elif dependency_name == 'ocm.software/ocm-gear/freshclam':
        with open(os.path.join(EXTENSIONS_CHART_DIR, 'values.yaml'), 'r+') as values_file:
            values = yaml.safe_load(values_file)
            values['clamav']['freshclam']['image']['tag'] = dependency_version.strip()
            values_file.seek(0)
            values_file.write(yaml.safe_dump(values))
            values_file.truncate()

    else:
        raise RuntimeError(f"Don't know how to upgrade dependency: {dependency_name}")


if __name__ == '__main__':
    main()
