import argparse
import atexit
import collections.abc
import datetime
import logging
import os
import signal
import sys
import tarfile
import time

import boto3

import ci.log
import cnudie.iter
import cnudie.retrieve
import delivery.client
import dso.model
import gci.componentmodel as cm
import model.aws
import oci.client

import config
import ctx_util
import k8s.backlog
import k8s.logging
import k8s.model
import k8s.util
import lookups
import malware.clamav
import malware.scan


logger = logging.getLogger(__name__)
ci.log.configure_default_logging()
k8s.logging.configure_kubernetes_logging()

own_dir = os.path.abspath(os.path.dirname(__file__))
default_cache_dir = os.path.join(own_dir, '.cache')

ready_to_terminate = True
wants_to_terminate = False


def handle_termination_signal(*args):
    global ready_to_terminate, wants_to_terminate

    # also terminate if > 1 termination signals were received
    if ready_to_terminate or wants_to_terminate:
        sys.exit(0)

    # grace period to finish current scan is defined in the replica set
    # after this period, the scan will be terminated anyways by k8s means
    logger.info('termination signal received, will try to finish current scan and then exit')
    wants_to_terminate = True


def parse_args():
    parser = argparse.ArgumentParser()

    parser.add_argument(
        '--k8s-cfg-name',
        help='specify kubernetes cluster to interact with',
        default=os.environ.get('K8S_CFG_NAME'),
    )
    parser.add_argument(
        '--kubeconfig',
        help='''
            specify kubernetes cluster to interact with extensions (and logs); if both
            `k8s-cfg-name` and `kubeconfig` are set, `k8s-cfg-name` takes precedence
        ''',
    )
    parser.add_argument(
        '--k8s-namespace',
        help='specify kubernetes cluster namespace to interact with',
        default=os.environ.get('K8S_TARGET_NAMESPACE'),
    )
    parser.add_argument(
        '--cfg-name',
        help='''
            specify the context the process should run in, not relevant for the artefact
            enumerator as well as backlog controller as these are context independent
        ''',
        default=os.environ.get('CFG_NAME'),
    )
    parser.add_argument(
        '--delivery-service-url',
        help='''
            specify the url of the delivery service to use instead of the one configured in the
            respective scan configuration
        ''',
    )
    parser.add_argument('--cache-dir', default=default_cache_dir)

    parsed_arguments = parser.parse_args()

    if not parsed_arguments.k8s_namespace:
        raise ValueError(
            'k8s namespace must be set, either via argument "--k8s-namespace" '
            'or via environment variable "K8S_TARGET_NAMESPACE"'
        )

    if not parsed_arguments.cfg_name:
        raise ValueError(
            'name of the to-be-used scan configuration must be set, either via '
            'argument "--cfg-name" or via environment variable "CFG_NAME"'
        )

    return parsed_arguments


def deserialise_clamav_configuration(
    cfg_name: str,
    namespace: str,
    kubernetes_api: k8s.util.KubernetesApi,
) -> config.ClamAVConfig:
    scan_cfg_crd = kubernetes_api.custom_kubernetes_api.get_namespaced_custom_object(
        group=k8s.model.ScanConfigurationCrd.DOMAIN,
        version=k8s.model.ScanConfigurationCrd.VERSION,
        plural=k8s.model.ScanConfigurationCrd.PLURAL_NAME,
        namespace=namespace,
        name=cfg_name,
    )

    if scan_cfg_crd and (spec := scan_cfg_crd.get('spec')):
        clamav_cfg = config.deserialise_clamav_config(spec_config=spec)
    else:
        clamav_cfg = None

    if not clamav_cfg:
        logger.warning(
            f'no clamav_cfg configuration for config elem {cfg_name} set, '
            'job is not able to process current scan backlog and will terminate'
        )
        sys.exit(0)

    return clamav_cfg


def scan_resource(
    resource_node: cnudie.iter.ResourceNode,
    oci_client: oci.client.Client,
    s3_client: 'boto3.resources.factory.s3.ServiceResource | None',
) -> collections.abc.Generator[dso.model.ClamAVMalwareFinding, None, None]:
    resource = resource_node.resource
    resource: cm.Resource

    if isinstance(resource.access, cm.OciAccess):
        results = malware.scan.scan_oci_image(
            image_reference=resource.access.imageReference,
            oci_client=oci_client,
        )

    elif isinstance(resource.access, cm.S3Access):
        if not s3_client:
            raise TypeError(f's3_client must not be None to scan {resource.access=}')

        if not resource.type.startswith('application/tar'):
            raise NotImplementedError(resource.type)

        fileobj = s3_client.Object(
            resource.access.bucketName,
            resource.access.objectKey,
        ).get()['Body']

        tf = tarfile.open(fileobj=fileobj, mode='r|*')
        results = malware.scan.scan_tarfile(
            tf=tf,
            context=f'{resource.access.bucketName}|{resource.access.objectKey}',
        )

    else:
        raise NotImplementedError(type(resource.access))

    return results


def _iter_clamav_malware_findings(
    findings: collections.abc.Iterable[dso.model.ClamAVMalwareFinding],
    resource_node: cnudie.iter.ResourceNode,
    datasource: str = dso.model.Datasource.CLAMAV,
    datatype: str = dso.model.Datatype.MALWARE_FINDING,
) -> collections.abc.Generator[dso.model.ArtefactMetadata, None, None]:
    discovery_date = datetime.date.today()
    now = datetime.datetime.now()

    artefact_ref = dso.model.component_artefact_id_from_ocm(
        component=resource_node.component,
        artefact=resource_node.artefact,
    )

    meta = dso.model.Metadata(
        datasource=datasource,
        type=datatype,
        creation_date=now,
        last_update=now,
    )

    for finding in findings:
        yield dso.model.ArtefactMetadata(
            artefact=artefact_ref,
            meta=meta,
            data=finding,
            discovery_date=discovery_date
        )


def scan_and_upload(
    backlog_item: k8s.backlog.BacklogItem,
    component_descriptor_lookup: cnudie.retrieve.ComponentDescriptorLookupById,
    delivery_client: delivery.client.DeliveryServiceClient,
    oci_client: oci.client.Client,
    s3_client: 'boto3.resources.factory.s3.ServiceResource | None',
    clamav_config: config.ClamAVConfig,
):
    if backlog_item.artefact.artefact_kind is not dso.model.ArtefactKind.RESOURCE:
        logger.warning(
            f'found unsupported artefact kind {backlog_item.artefact.artefact_kind}, skipping...'
        )
        return

    resource_node = k8s.util.get_ocm_node(
        component_descriptor_lookup=component_descriptor_lookup,
        artefact=backlog_item.artefact,
    )

    if not resource_node.resource.type in clamav_config.artefact_types:
        return

    comp = resource_node.component
    res = resource_node.resource
    resource_node_name = f'{comp.name}:{comp.version} - {res.name}:{res.version}'
    logger.info(f'scanning {resource_node_name=}')

    result = scan_resource(
        resource_node=resource_node,
        oci_client=oci_client,
        s3_client=s3_client,
    )

    scan_info = dso.model.artefact_scan_info(
        artefact_node=resource_node,
        datasource=dso.model.Datasource.CLAMAV,
    )

    delivery_client.update_metadata(
        data=list(
            _iter_clamav_malware_findings(
                findings=result,
                resource_node=resource_node,
            )
        ) + [scan_info]
    )


def main():
    signal.signal(signal.SIGTERM, handle_termination_signal)
    signal.signal(signal.SIGINT, handle_termination_signal)

    parsed_arguments = parse_args()
    cfg_name = parsed_arguments.cfg_name
    namespace = parsed_arguments.k8s_namespace
    delivery_service_url = parsed_arguments.delivery_service_url

    cfg_factory = ctx_util.cfg_factory()

    if parsed_arguments.k8s_cfg_name:
        kubernetes_cfg = cfg_factory.kubernetes(parsed_arguments.k8s_cfg_name)
        kubernetes_api = k8s.util.kubernetes_api(kubernetes_cfg=kubernetes_cfg)
    else:
        kubernetes_api = k8s.util.kubernetes_api(
            kubeconfig_path=parsed_arguments.kubeconfig,
        )

    k8s.logging.init_logging_thread(
        service=config.Services.CLAMAV,
        namespace=namespace,
        kubernetes_api=kubernetes_api,
    )

    atexit.register(
        k8s.logging.log_to_crd,
        service=config.Services.CLAMAV,
        namespace=namespace,
        kubernetes_api=kubernetes_api,
    )

    clamav_config = deserialise_clamav_configuration(
        cfg_name=cfg_name,
        namespace=namespace,
        kubernetes_api=kubernetes_api,
    )

    if not delivery_service_url:
        delivery_service_url = clamav_config.delivery_service_url

    delivery_client = delivery.client.DeliveryServiceClient(
        routes=delivery.client.DeliveryServiceRoutes(
            base_url=delivery_service_url,
        ),
        cfg_factory=cfg_factory,
    )

    oci_client = lookups.semver_sanitised_oci_client(
        cfg_factory=cfg_factory,
    )

    if clamav_config.aws_cfg_name:
        aws_cfg: model.aws.AwsProfile = cfg_factory.aws(clamav_config.aws_cfg_name)

        aws_session = boto3.Session(
            aws_access_key_id=aws_cfg.access_key_id(),
            aws_secret_access_key=aws_cfg.secret_access_key(),
            region_name=aws_cfg.region(),
        )
        s3_client = aws_session.resource('s3')

    else:
        s3_client = None
        logger.warning('no aws-cfg specified, will not be able to scan s3 artefacts')

    component_descriptor_lookup = lookups.init_component_descriptor_lookup(
        cache_dir=parsed_arguments.cache_dir,
        delivery_client=delivery_client,
    )

    global ready_to_terminate, wants_to_terminate
    while not wants_to_terminate:
        ready_to_terminate = False

        backlog_crd = k8s.backlog.get_backlog_crd_and_claim(
            service=config.Services.CLAMAV,
            cfg_name=cfg_name,
            namespace=namespace,
            kubernetes_api=kubernetes_api,
        )

        if not backlog_crd:
            ready_to_terminate = True
            sleep_interval = clamav_config.lookup_new_backlog_item_interval
            logger.info(f'no open backlog item found, will sleep for {sleep_interval} sec')
            time.sleep(sleep_interval)
            continue

        name = backlog_crd.get('metadata').get('name')
        logger.info(f'processing backlog item {name}')

        backlog_item = k8s.backlog.BacklogItem.from_dict(
            backlog_item=backlog_crd.get('spec'),
        )

        scan_and_upload(
            backlog_item=backlog_item,
            component_descriptor_lookup=component_descriptor_lookup,
            delivery_client=delivery_client,
            oci_client=oci_client,
            s3_client=s3_client,
            clamav_config=clamav_config,
        )

        k8s.util.delete_custom_resource(
            crd=k8s.model.BacklogItemCrd,
            name=name,
            namespace=namespace,
            kubernetes_api=kubernetes_api,
        )
        logger.info(f'processed and deleted backlog item {name}')


if __name__ == '__main__':
    main()
