name: Build and Test

on:
  workflow_call:
    inputs:
      mode:
        required: true
        type: string
        description:
          mode as expected by `cc-util/.github/workflows/prepare`
          either of
          - snapshot
          - release

jobs:
  prepare:
    uses: gardener/cc-utils/.github/workflows/prepare.yaml@master
    with:
      mode: ${{ inputs.mode }}

  setuptools-version:
    runs-on: ubuntu-latest
    permissions: {}
    needs:
      - prepare
    outputs:
      setuptools-version: ${{ steps.version-setuptools.outputs.setuptools-version }}
    steps:
    - name: version-setuptools
      id: version-setuptools
      run: |
        set -eu
        version=${{ needs.prepare.outputs.version }}
        if [[ "${version}" == *-* ]]; then
          # version was non-final - add suffix compliant w/ pep-440
          version="${version%%-*}-dev0"
        fi
        echo "setuptools-version=${version}" >> ${GITHUB_OUTPUT}

  packages:
    runs-on: ubuntu-latest
    needs:
      - setuptools-version
      - prepare
    steps:
      - name: install setuptools
        run: |
          pip3 install --root-user-action ignore \
            setuptools
      - uses: actions/checkout@v4
      - uses: gardener/cc-utils/.github/actions/install-gardener-gha-libs@master
      - name: create distribution packages
        run: |
          set -eu

          version=${{ needs.setuptools-version.outputs.setuptools-version }}
          echo "version: ${version}"

          # pass finalised version to setups
          export ODG_SERVICE_PACKAGE_VERSION=${version}
          export ODG_EXTENSIONS_PACKAGE_VERSION=${version}
          export ODG_UTILS_PACKAGE_VERSION=${version}

          pkg_dir=dist
          mkdir -p ${pkg_dir}
          pkg_dir="$(readlink -f dist)"

          ocm_repo='europe-docker.pkg.dev/gardener-project/releases'
          cc_utils_version="$(cat "CC_UTILS_VERSION")"
          bdba_version="$(cat "BDBA_DEPENDENCY_VERSION")"

          for resource in gardener-cicd-libs gardener-oci gardener-ocm; do
            echo "downloading ${resource}:${cc_utils_version}"
            python -m ocm download resource \
              --ocm-repository "${ocm_repo}" \
              --component "github.com/gardener/cc-utils:${cc_utils_version}" \
              --name "${resource}" \
              | tar xJ -C"${pkg_dir}"
          done

          python -m ocm download resource \
            --ocm-repository "${ocm_repo}" \
            --component "ocm.software/ocm-gear/bdba-client:${bdba_version}" \
            --name bdba \
            | tar xJ -C"${pkg_dir}"

          for path in \
            setup.utils.py \
            setup.service.py \
            setup.extensions.py \
          ; do
          echo "building distribution package from ${path}"
          python3 ${path} \
              bdist_wheel \
              --dist-dir ${pkg_dir}
          rm -rf build
          done

          echo "Built packages"
          ls "${pkg_dir}"

          blobs_dir="${pkg_dir}/blobs.d"
          mkdir ${blobs_dir}
          resources_file=resources.yaml

          for package in \
            delivery-gear-utils \
            ocm-gear-extensions \
            ocm-gear-service \
            ; do
            path="$(echo $package | tr - _)-*"
            prefix=dist
            access_type='localBlob'
            outf="${pkg_dir}/${package}.tar.gz"
            tar cJf ${outf} -C ${pkg_dir} $(cd ${pkg_dir}; ls ${path})
            mimetype=$(file -i ${outf} | cut -d: -f2 | cut -d' ' -f2-)
            leng=$(stat -c"%s" ${outf})
            digest="$(sha256sum ${outf} | cut -d' ' -f1)"
            echo "\
          - name: ${package}
            version: ${{ needs.prepare.outputs.version }}
            type: ${mimetype}
            relation: local
            access:
              type: localBlob
              localReference: sha256:${digest}
              size: ${leng}
              mediaType: ${mimetype}" \
            >> ${resources_file}
            mv ${outf} ${blobs_dir}/${digest}
          done

          cp "${resources_file}" dist/ocm_resources.yaml
          echo "ocm_resources=dist/ocm_resources.yaml" >> "${GITHUB_OUTPUT}"
          find "${pkg_dir}"
          tar czf distribution-packages.tar.gz dist
      - name: export-ocm-fragments
        uses: gardener/cc-utils/.github/actions/export-ocm-fragments@master
        with:
          ocm-resources-file: dist/ocm_resources.yaml
          blobs-directory: dist/blobs.d
      - name: upload python-packages as artefact
        uses: actions/upload-artifact@v4
        with:
          name: distribution-packages
          path: distribution-packages.tar.gz

  lint:
    runs-on: ubuntu-latest
    needs:
      - packages
    container:
      image: python:3.12-alpine
    steps:
    - uses: actions/checkout@v4
    - name: Retrieve Distribution Packages
      uses: actions/download-artifact@v4
      with:
        name: distribution-packages
    - name: lint
      run: |
        echo "install dependencies for python-packages"

        if ! apk add --no-cache $(cat apk-packages) >/tmp/apk.log; then
          echo "error while trying to install apk-packages:"
          cat /tmp/apk.log
          exit 1
        fi

        tar xf distribution-packages.tar.gz -C /tmp

        echo "installing linters"
        if ! pip3 install --pre --upgrade --break-system-packages \
          --find-links /tmp/dist \
          -r requirements.extensions.txt \
          -r requirements.service.txt \
          -r requirements.utils.txt \
          numpy \
          scipy \
          bandit \
          flake8 \
          pylama \
          pylint \
            > /tmp/pip3-install.log; then
          echo "error while trying to install packages:"
          cat /tmp/pip3-install.log
        fi

        echo "running linters"
        blobs_dir=blobs.d
        mkdir $blobs_dir
        bandit_logfile=bandit.log
        bandit_evidence="${blobs_dir}/bandit.tar.gz"

        bandit_extra_args="-f txt -o ${bandit_logfile}" \
          .ci/lint

        # pass bandit.log + used cfg (pyproject.toml) as evidence
        tar czf $bandit_evidence $bandit_logfile pyproject.toml

    - uses: gardener/cc-utils/.github/actions/export-ocm-fragments@master
      with:
        ocm-resources: |
          name: sast-linting-evidence
          relation: local
          access:
            type: localBlob
            localReference: bandit.tar.gz
          labels:
            - name: gardener.cloud/purposes
              value:
                - lint
                - sast
                - pybandit
            - name: gardener.cloud/comment
              value: |
                we use bandit (linter) for SAST-Scans.
                See: https://bandit.readthedocs.io/en/latest/
        blobs-directory: blobs.d

  unittests:
    runs-on: ubuntu-latest
    needs:
      - packages
    container:
      image: alpine
    steps:
    - uses: actions/checkout@v4
    - name: Retrieve Distribution Packages
      uses: actions/download-artifact@v4
      with:
        name: distribution-packages
    - name: run-tests
      run: |
        echo "install dependencies for python-packages"

        if ! apk add --no-cache $(cat apk-packages) >/tmp/apk.log; then
          echo "error while trying to install apk-packages:"
          cat /tmp/apk.log
          exit 1
        fi

        tar xf distribution-packages.tar.gz -C /tmp

        echo "installing packages"
        if ! pip3 install --pre --upgrade --break-system-packages \
          --find-links /tmp/dist \
          -r requirements.extensions.txt \
          -r requirements.service.txt \
          -r requirements.utils.txt \
          pytest \
          pytest-asyncio \
            > /tmp/pip3-install.log; then
          echo "error while trying to install packages:"
          cat /tmp/pip3-install.log
        fi

        echo "running tests"
        .ci/smoke-test
        .ci/test

  oci-images:
    name: Build OCI-Images
    needs:
      - packages # needed indirectly (python-packages artefact)
      - prepare
    permissions:
      contents: read
      packages: write
      id-token: write
    uses: gardener/cc-utils/.github/workflows/oci-ocm.yaml@master
    strategy:
      matrix:
        args:
          - name: delivery-service
            dockerfile: Dockerfile.service
            oci-repository: odg/delivery-service
            build-ctx-artefact: distribution-packages
            untar-build-ctx-artefact: distribution-packages.tar.gz
            ocm-labels:
              name: gardener.cloud/cve-categorisation
              value:
                network_exposure: public
                authentication_enforced: true
                user_interaction: end-user
                confidentiality_requirement: high
                integrity_requirement: high
                availability_requirement: high
          - name: extensions
            dockerfile: Dockerfile.extensions
            oci-repository: odg/extensions
            build-ctx-artefact: distribution-packages
            untar-build-ctx-artefact: distribution-packages.tar.gz
            ocm-labels:
              name: gardener.cloud/cve-categorisation
              value:
                network_exposure: protected
                authentication_enforced: true
                user_interaction: gardener-operator
                confidentiality_requirement: high
                integrity_requirement: high
                availability_requirement: low
          - name: extension-cache-manager
            dockerfile: Dockerfile.extensions.cache-manager
            oci-repository: odg/extension-cache-manager
            build-ctx-artefact: distribution-packages
            untar-build-ctx-artefact: distribution-packages.tar.gz
            ocm-labels:
              name: gardener.cloud/cve-categorisation
              value:
                network_exposure: protected
                authentication_enforced: true
                user_interaction: gardener-operator
                confidentiality_requirement: high
                integrity_requirement: high
                availability_requirement: low
          - name: extension-clamav
            dockerfile: Dockerfile.extensions.clamav
            oci-repository: odg/extension-clamav
            build-ctx-artefact: distribution-packages
            untar-build-ctx-artefact: distribution-packages.tar.gz
            ocm-labels:
              name: gardener.cloud/cve-categorisation
              value:
                network_exposure: protected
                authentication_enforced: true
                user_interaction: gardener-operator
                confidentiality_requirement: high
                integrity_requirement: high
                availability_requirement: low
          - name: extension-crypto
            dockerfile: Dockerfile.extensions.crypto
            oci-repository: odg/extension-crypto
            build-ctx-artefact: distribution-packages
            untar-build-ctx-artefact: distribution-packages.tar.gz
            ocm-labels:
              name: gardener.cloud/cve-categorisation
              value:
                network_exposure: protected
                authentication_enforced: true
                user_interaction: gardener-operator
                confidentiality_requirement: high
                integrity_requirement: high
                availability_requirement: low

    with:
      name: ${{ matrix.args.name }}
      version: ${{ needs.prepare.outputs.version }}
      oci-registry: ${{ needs.prepare.outputs.oci-registry }}
      oci-repository: ${{ matrix.args.oci-repository }}
      oci-platforms: 'linux/amd64'
      dockerfile: ${{ matrix.args.dockerfile }}
      build-ctx-artefact: ${{ matrix.args.build-ctx-artefact }}
      untar-build-ctx-artefact: ${{ matrix.args.untar-build-ctx-artefact }}
      ctx: oci-images
      ocm-labels: ${{ toJSON(matrix.args.ocm-labels) }}

  helmcharts:
    name: Build Helmcharts
    needs:
      - prepare
      - oci-images
    permissions:
      contents: read
      packages: write
      id-token: write
    uses: gardener/cc-utils/.github/workflows/helmchart-ocm.yaml@master
    strategy:
      matrix:
        args:
          - name: delivery-service
            dir: charts/delivery-service
            repository: charts/odg
            mappings:
              - ref: ocm-resource:delivery-service.repository
                attribute: image.repository
              - ref: ocm-resource:delivery-service.tag
                attribute: image.tag

          - name: extensions
            dir: charts/extensions
            repository: charts/odg
            mappings:
              - ref: ocm-resource:extensions.repository
                attribute: artefact-enumerator.image.repository
              - ref: ocm-resource:extensions.tag
                attribute: artefact-enumerator.image.tag
              - ref: ocm-resource:extensions.repository
                attribute: backlog-controller.image.repository
              - ref: ocm-resource:extensions.tag
                attribute: backlog-controller.image.tag
              - ref: ocm-resource:extensions.repository
                attribute: bdba.image.repository
              - ref: ocm-resource:extensions.tag
                attribute: bdba.image.tag
              - ref: ocm-resource:extension-clamav.repository
                attribute: clamav.image.repository
              - ref: ocm-resource:extension-clamav.tag
                attribute: clamav.image.tag
              - ref: ocm-resource:extensions.repository
                attribute: issue-replicator.image.repository
              - ref: ocm-resource:extensions.tag
                attribute: issue-replicator.image.tag
              - ref: ocm-resource:extension-cache-manager.repository
                attribute: cache-manager.image.repository
              - ref: ocm-resource:extension-cache-manager.tag
                attribute: cache-manager.image.tag
              - ref: ocm-resource:extensions.repository
                attribute: delivery-db-backup.image.repository
              - ref: ocm-resource:extensions.tag
                attribute: delivery-db-backup.image.tag
              - ref: ocm-resource:extensions.repository
                attribute: sast.image.repository
              - ref: ocm-resource:extensions.tag
                attribute: sast.image.tag
              - ref: ocm-resource:extension-crypto.repository
                attribute: crypto.image.repository
              - ref: ocm-resource:extension-crypto.tag
                attribute: crypto.image.tag
              - ref: ocm-resource:extensions.repository
                attribute: osid.image.repository
              - ref: ocm-resource:extensions.tag
                attribute: osid.image.tag
              - ref: ocm-resource:extensions.repository
                attribute: responsibles.image.repository
              - ref: ocm-resource:extensions.tag
                attribute: responsibles.image.tag

          - name: bootstrapping
            dir: charts/bootstrapping
            repository: charts/odg
            mappings: []
    with:
      name: ${{ matrix.args.name }}
      dir: ${{ matrix.args.dir }}
      oci-registry: ${{ needs.prepare.outputs.oci-registry }}
      oci-repository: ${{ matrix.args.repository }}
      ocm-mappings: ${{ toJSON(matrix.args.mappings) }}

  documentation:
    name: Generate Documentation
    needs:
      - oci-images
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
    - uses: actions/checkout@v4
    - name: Setup Docker-Buildx
      uses: docker/setup-buildx-action@v3
    - name: Generate Documentation
      run: |
        image_ref=${{ needs.oci-images.outputs.oci-reference }}
        mkdir documentation-out.d
        docker run -v $PWD:/src \
          -e GH_PAGES_PATH=/src/documentation-out.d \
          ${image_ref} \
          /src/.ci/generate_documentation
        ls documentation-out.d
    - uses: actions/upload-artifact@v4
      with:
        name: documentation
        path: documentation-out.d

  publish-documentation:
    if: ${{ github.ref_name == github.event.repository.default_branch }}
    name: Publish Documentation
    needs:
      - documentation
    runs-on: ubuntu-latest
    permissions:
      packages: read
    steps:
      - uses: actions/create-github-app-token@v2
        id: app-token
        with:
          app-id: ${{ vars.GARDENER_GITHUB_ACTIONS_APP_ID }}
          private-key: ${{ secrets.GARDENER_GITHUB_ACTIONS_PRIVATE_KEY }}
      - uses: actions/checkout@v4
        with:
          ref: refs/heads/gh-pages
          token: ${{ steps.app-token.outputs.token }}
      - name: Retrieve Documentation
        uses: actions/download-artifact@v4
        with:
          name: documentation
          path: /tmp/documentation-out.d
      - uses: gardener/cc-utils/.github/actions/setup-git-identity@master
      - name: Publish Documentation
        run: |
          tar c -C /tmp/documentation-out.d . | tar x -C.
          git status
          if [ -z "$(git status --porcelain)" ]; then
            echo "no changes in documentation - no need to update documentation"
            exit 0
          fi
          git add -A
          git commit -m "Update documentation"
          git push origin refs/heads/gh-pages
